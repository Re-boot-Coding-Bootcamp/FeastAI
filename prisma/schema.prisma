generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

// Bazaar schema
model Category {
    id          String    @id @default(cuid())
    name        String
    description String?
    products    Product[]
}

model Image {
    id               String @id @default(cuid())
    productVariantId String
    url              String

    productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

    @@index([productVariantId])
}

model Product {
    id          String           @id @default(cuid())
    name        String
    description String
    categoryId  String
    variants    ProductVariant[]
    createdAt   DateTime         @default(now())

    category Category @relation(fields: [categoryId], references: [id])

    @@index([categoryId])
}

model ProductVariant {
    id           String   @id @default(cuid())
    productId    String
    price        Float
    size         String
    color        String
    stock        Int
    quantitySold Int      @default(0)
    images       Image[]
    createdAt    DateTime @default(now())

    product  Product    @relation(fields: [productId], references: [id])
    CartItem CartItem[]

    @@index([productId])
}

model Cart {
    id    String     @id @default(cuid())
    items CartItem[]
}

model CartItem {
    id               String @id @default(cuid())
    cartId           String
    productVariantId String
    quantity         Int

    cart           Cart           @relation(fields: [cartId], references: [id])
    productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

    @@index([cartId])
    @@index([productVariantId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Feast AI schema
